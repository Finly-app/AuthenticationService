// <auto-generated />
using System;
using Authentication.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Authentication.Persistance.Migrations
{
    [DbContext(typeof(AuthenticationDatabaseContext))]
    [Migration("20250619212252_Added2FA")]
    partial class Added2FA
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authentication.Domain.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expires_at");

                    b.Property<string>("JwtToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("tokens", (string)null);
                });

            modelBuilder.Entity("Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("policies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fbed1fd-75e7-42a9-b017-8a2be84c81f1"),
                            Name = "users:read"
                        },
                        new
                        {
                            Id = new Guid("2666478b-d202-412e-b166-392499b06c95"),
                            Name = "users:read:me"
                        },
                        new
                        {
                            Id = new Guid("9a308869-5e11-4480-916b-cef3908797dc"),
                            Name = "users:create"
                        },
                        new
                        {
                            Id = new Guid("cdd60f4c-521f-4a45-8b87-1b84b69d49c1"),
                            Name = "users:update"
                        },
                        new
                        {
                            Id = new Guid("d0f61701-de19-4e1e-bea9-dd434d4e982c"),
                            Name = "users:update:me"
                        },
                        new
                        {
                            Id = new Guid("321aa912-e34e-4f41-9dbf-f5f61a3951f2"),
                            Name = "users:delete"
                        },
                        new
                        {
                            Id = new Guid("d54a78a0-0387-43fd-9fe9-c1defca482e1"),
                            Name = "users:delete:me"
                        },
                        new
                        {
                            Id = new Guid("a10b5c92-3e9b-4d8a-bf01-19d3f9b6f111"),
                            Name = "roles:read"
                        },
                        new
                        {
                            Id = new Guid("b21e5d93-4f7c-4d2e-a401-28a5f0c7e222"),
                            Name = "roles:create"
                        },
                        new
                        {
                            Id = new Guid("c32f6e94-5a8d-4d3f-b502-37c7f1d8f333"),
                            Name = "roles:update"
                        },
                        new
                        {
                            Id = new Guid("d43f7f95-6b9e-4e40-c603-46e8f2e9f444"),
                            Name = "roles:delete"
                        },
                        new
                        {
                            Id = new Guid("e54f8096-7caf-4f51-d704-55f9f3faf555"),
                            Name = "roles:policies:read"
                        },
                        new
                        {
                            Id = new Guid("f65f9197-8db0-4f62-e805-64faf4fbf666"),
                            Name = "roles:policies:assign"
                        },
                        new
                        {
                            Id = new Guid("067fa298-9ec1-4f73-f906-73fb05fc0777"),
                            Name = "roles:policies:remove"
                        },
                        new
                        {
                            Id = new Guid("178fb399-afd2-5074-0a07-82fc16fd1888"),
                            Name = "roles:inheritance:create"
                        },
                        new
                        {
                            Id = new Guid("289fc49a-c0e3-6185-1b18-91fd27fe2999"),
                            Name = "users:roles:read"
                        },
                        new
                        {
                            Id = new Guid("39afd59b-d1f4-7296-2c29-a20e380f3aaa"),
                            Name = "users:roles:assign"
                        },
                        new
                        {
                            Id = new Guid("4ab0e69c-e205-83a7-3d3a-b31f491045bb"),
                            Name = "users:policies:read"
                        },
                        new
                        {
                            Id = new Guid("5bc1f79d-f316-94b8-4e4b-c42f5a2156cc"),
                            Name = "users:policies:assign"
                        },
                        new
                        {
                            Id = new Guid("6cd2089e-0427-a5c9-5f5c-d53f6b3267dd"),
                            Name = "users:policies:remove"
                        },
                        new
                        {
                            Id = new Guid("7de3199f-1538-b6da-607d-e64f7c4378ee"),
                            Name = "policies:read"
                        },
                        new
                        {
                            Id = new Guid("8ef42aa0-2649-c7eb-718e-f75f8d5489ff"),
                            Name = "policies:create"
                        },
                        new
                        {
                            Id = new Guid("9ff53bb1-375a-d8fc-829f-08609e659a00"),
                            Name = "policies:update"
                        },
                        new
                        {
                            Id = new Guid("a1064cc2-486b-e90d-93a0-1971af76ab11"),
                            Name = "policies:delete"
                        });
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0cc1b7f-2705-49b9-b746-75a8dac9861d"),
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a191243f-1149-4b19-a66c-96541dc2deff"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("RoleInheritance", b =>
                {
                    b.Property<Guid>("ChildRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("ChildRoleId", "ParentRoleId");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("role_inheritance", (string)null);

                    b.HasData(
                        new
                        {
                            ChildRoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            ParentRoleId = new Guid("c0cc1b7f-2705-49b9-b746-75a8dac9861d")
                        },
                        new
                        {
                            ChildRoleId = new Guid("a191243f-1149-4b19-a66c-96541dc2deff"),
                            ParentRoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d")
                        });
                });

            modelBuilder.Entity("RolePolicy", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("policy_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoleId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.ToTable("roles_has_policies", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("a191243f-1149-4b19-a66c-96541dc2deff"),
                            PolicyId = new Guid("2666478b-d202-412e-b166-392499b06c95")
                        },
                        new
                        {
                            RoleId = new Guid("a191243f-1149-4b19-a66c-96541dc2deff"),
                            PolicyId = new Guid("d0f61701-de19-4e1e-bea9-dd434d4e982c")
                        },
                        new
                        {
                            RoleId = new Guid("a191243f-1149-4b19-a66c-96541dc2deff"),
                            PolicyId = new Guid("d54a78a0-0387-43fd-9fe9-c1defca482e1")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("3fbed1fd-75e7-42a9-b017-8a2be84c81f1")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("9a308869-5e11-4480-916b-cef3908797dc")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("cdd60f4c-521f-4a45-8b87-1b84b69d49c1")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("321aa912-e34e-4f41-9dbf-f5f61a3951f2")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("a10b5c92-3e9b-4d8a-bf01-19d3f9b6f111")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("b21e5d93-4f7c-4d2e-a401-28a5f0c7e222")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("c32f6e94-5a8d-4d3f-b502-37c7f1d8f333")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("d43f7f95-6b9e-4e40-c603-46e8f2e9f444")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("e54f8096-7caf-4f51-d704-55f9f3faf555")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("f65f9197-8db0-4f62-e805-64faf4fbf666")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("067fa298-9ec1-4f73-f906-73fb05fc0777")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("178fb399-afd2-5074-0a07-82fc16fd1888")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("289fc49a-c0e3-6185-1b18-91fd27fe2999")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("39afd59b-d1f4-7296-2c29-a20e380f3aaa")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("4ab0e69c-e205-83a7-3d3a-b31f491045bb")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("5bc1f79d-f316-94b8-4e4b-c42f5a2156cc")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("6cd2089e-0427-a5c9-5f5c-d53f6b3267dd")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("7de3199f-1538-b6da-607d-e64f7c4378ee")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("8ef42aa0-2649-c7eb-718e-f75f8d5489ff")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("9ff53bb1-375a-d8fc-829f-08609e659a00")
                        },
                        new
                        {
                            RoleId = new Guid("33ee7453-b06c-4959-9377-badf265ee52d"),
                            PolicyId = new Guid("a1064cc2-486b-e90d-93a0-1971af76ab11")
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("password");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("TwoFactorSecret")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("two_factor_secret");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UserPolicy", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("policy_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "PolicyId");

                    b.HasIndex("PolicyId");

                    b.ToTable("users_has_policies", (string)null);
                });

            modelBuilder.Entity("RoleInheritance", b =>
                {
                    b.HasOne("Role", "ChildRole")
                        .WithMany()
                        .HasForeignKey("ChildRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Role", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildRole");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("RolePolicy", b =>
                {
                    b.HasOne("Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", null)
                        .WithMany("Policies")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserPolicy", b =>
                {
                    b.HasOne("Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany("Policies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Policies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Policies");
                });
#pragma warning restore 612, 618
        }
    }
}
